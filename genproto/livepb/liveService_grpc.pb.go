// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: protos/live-service/liveService.proto

package livepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LiveStreamService_CreateLiveStream_FullMethodName = "/LiveStreamService/CreateLiveStream"
	LiveStreamService_GetLiveStream_FullMethodName    = "/LiveStreamService/GetLiveStream"
)

// LiveStreamServiceClient is the client API for LiveStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveStreamServiceClient interface {
	CreateLiveStream(ctx context.Context, in *LiveStream, opts ...grpc.CallOption) (*ResponseMessage, error)
	GetLiveStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*VoidLive, error)
}

type liveStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveStreamServiceClient(cc grpc.ClientConnInterface) LiveStreamServiceClient {
	return &liveStreamServiceClient{cc}
}

func (c *liveStreamServiceClient) CreateLiveStream(ctx context.Context, in *LiveStream, opts ...grpc.CallOption) (*ResponseMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, LiveStreamService_CreateLiveStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveStreamServiceClient) GetLiveStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*VoidLive, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoidLive)
	err := c.cc.Invoke(ctx, LiveStreamService_GetLiveStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveStreamServiceServer is the server API for LiveStreamService service.
// All implementations must embed UnimplementedLiveStreamServiceServer
// for forward compatibility
type LiveStreamServiceServer interface {
	CreateLiveStream(context.Context, *LiveStream) (*ResponseMessage, error)
	GetLiveStream(context.Context, *GetStreamRequest) (*VoidLive, error)
	mustEmbedUnimplementedLiveStreamServiceServer()
}

// UnimplementedLiveStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiveStreamServiceServer struct {
}

func (UnimplementedLiveStreamServiceServer) CreateLiveStream(context.Context, *LiveStream) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLiveStream not implemented")
}
func (UnimplementedLiveStreamServiceServer) GetLiveStream(context.Context, *GetStreamRequest) (*VoidLive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveStream not implemented")
}
func (UnimplementedLiveStreamServiceServer) mustEmbedUnimplementedLiveStreamServiceServer() {}

// UnsafeLiveStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveStreamServiceServer will
// result in compilation errors.
type UnsafeLiveStreamServiceServer interface {
	mustEmbedUnimplementedLiveStreamServiceServer()
}

func RegisterLiveStreamServiceServer(s grpc.ServiceRegistrar, srv LiveStreamServiceServer) {
	s.RegisterService(&LiveStreamService_ServiceDesc, srv)
}

func _LiveStreamService_CreateLiveStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveStreamServiceServer).CreateLiveStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveStreamService_CreateLiveStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveStreamServiceServer).CreateLiveStream(ctx, req.(*LiveStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveStreamService_GetLiveStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveStreamServiceServer).GetLiveStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveStreamService_GetLiveStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveStreamServiceServer).GetLiveStream(ctx, req.(*GetStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveStreamService_ServiceDesc is the grpc.ServiceDesc for LiveStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LiveStreamService",
	HandlerType: (*LiveStreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLiveStream",
			Handler:    _LiveStreamService_CreateLiveStream_Handler,
		},
		{
			MethodName: "GetLiveStream",
			Handler:    _LiveStreamService_GetLiveStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/live-service/liveService.proto",
}
